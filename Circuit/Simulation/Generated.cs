// Decompiled with JetBrains decompiler
// Type: DelegateHostAssembly.foo
// Assembly: DelegateHostAssembly, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 52345A67-16FA-4D5E-91DD-E25ECB470219
// Assembly location: C:\Users\08fed\Documents\spice\LiveSPICE\LiveSPICE\bin\Release\net472\DelegateHostAssembly.dll

using Circuit;
using ComputerAlgebra.LinqCompiler;
using System;

namespace DelegateHostAssembly
{
    //TODO: vectorize multiplication + addition -> product
    //TODO: conditional operator: calculate only used branch, not both
    public class Generated
    {
        public static double Execute(
          int SampleCount,
          double t,
          double[] state,
          double[][] ins,
          double[][] outs)
        {
            double num1 = state[0];
            double num2 = state[1];
            double num3 = state[2];
            double num4 = state[3];
            double num5 = state[4];
            double num6 = state[5];
            double num7 = state[6];
            double num8 = state[7];
            double num9 = state[8];
            double num10 = state[9];
            double num11 = state[10];
            double num12 = state[11];
            double num13 = state[12];
            double num14 = state[13];
            double num15 = state[14];
            double num16 = state[15];
            double num17 = state[16];
            double num18 = state[17];
            double num19 = state[18];
            double num20 = state[19];
            double num21 = state[20];
            double num22 = state[21];
            double num23 = state[22];
            double num24 = state[23];
            double num25 = state[24];
            double num26 = state[25];
            double num27 = state[26];
            double num28 = state[27];
            double num29 = state[28];
            double num30 = state[29];
            double num31 = state[30];
            double num32 = state[31];
            double num33 = state[32];
            double num34 = state[33];
            double num35 = state[34];
            double num36 = state[35];
            double num37 = state[36];
            double num38 = state[37];
            double num39 = state[38];
            double num40 = state[39];
            double num41 = state[40];
            double num42 = state[41];
            double num43 = state[42];
            double num44 = state[43];
            double num45 = state[44];
            double num46 = state[45];
            double num47 = state[46];
            double num48 = state[47];
            double num49 = state[48];
            double num50 = state[49];
            double num51 = state[50];
            double num52 = state[51];
            double num53 = state[52];
            double num54 = state[53];
            double num55 = state[54];
            double num56 = state[55];
            double num57 = state[56];
            double num58 = state[57];
            double num59 = state[58];
            double num60 = state[59];
            double num61 = state[60];
            double num62 = state[61];
            double num63 = state[62];
            double num64 = state[63];
            double num65 = num64;
            double[][] Ab = new double[8][]
            {
        new double[9],
        new double[9],
        new double[9],
        new double[9],
        new double[9],
        new double[9],
        new double[9],
        new double[9]
            };
            for (int sampleNumber = 0; sampleNumber < SampleCount; ++sampleNumber)
            {
                double num66 = (ins[0][sampleNumber] - num65) * 1.0;
                double d = 0.0;
                int oversample = 1;
                do
                {
                    t += 2.26757369614512E-05;
                    num65 += num66;
                    double num68 = 0.0;
                    double num69 = 0.0;
                    double num70 = 0.0;
                    double num71 = 0.0;
                    double num72 = num68 + 294.0;
                    double num73 = num69 + 300.0;
                    double num74 = num65;
                    double num75 = num70 + 275.0;
                    double num76 = num71 + 275.0;
                    double num77 = num51;
                    double num78 = num55;
                    double num79 = num50;
                    double num80 = num48;
                    double num81 = num54;
                    double num82 = num49;
                    double num83 = num47;
                    double num84 = num16;
                    double num85 = num46;
                    double num86 = num44;
                    double num87 = num37;
                    double num88 = num17;
                    double num89 = num12;
                    double num90 = num34;
                    double num91 = num53;
                    double num92 = num29;
                    double num93 = num36;
                    double num94 = num33;
                    double num95 = num45;
                    double num96 = num39;
                    double num97 = num35;
                    double num98 = num42;
                    double num99 = num38;
                    double num100 = num32;
                    double num101 = num31;
                    double num102 = num43;
                    double num103 = num30;
                    double num104 = num40;
                    double num105 = num28;
                    double num106 = num27;
                    double num107 = num26;
                    double num108 = num25;
                    double num109 = num24;
                    double num110 = num23;
                    double num111 = num22;
                    double num112 = num21;
                    double num113 = num20;
                    double num114 = num19;
                    double num115 = num18;
                    double num116 = num15;
                    double num117 = num11;
                    double num118 = num14;
                    double num119 = num13;
                    double num120 = num41;
                    double num121 = num10;
                    double num122 = num9;
                    double num123 = num52;
                    double num124 = num8;
                    double num125 = num7;
                    double num126 = num56;
                    double num127 = num6;
                    double num128 = num57;
                    double num129 = num5;
                    double num130 = num58;
                    double num131 = num59;
                    double num132 = num60;
                    double num133 = num61;
                    double num134 = num62;
                    double num135 = num63;
                    int iterations = 8;
                    do
                    {
                        double[] numArray1 = Ab[0];
                        double x1 = num134 * 3.4 + num126 * (17.0 / 516.0);
                        bool flag1 = x1 > -5.0;
                        bool flag2 = x1 < 5.0;
                        bool flag3 = x1 < 50.0;
                        double num137 = StandardMath.Exp(x1);
                        double num138 = num134 * 1.7627998797196E+22 + num126 * 1.70813941833295E+20 - 2.54050570900767E+23;
                        double x2 = (!flag3 ? num138 : num137) + 1.0;
                        double num139 = 1.0 / x2;
                        double num140 = num137 * (17.0 / 516.0);
                        double num141 = num139 * (!flag3 ? 1.70813941833295E+20 : num140);
                        double num142 = StandardMath.Ln(x2);
                        double x3 = (!flag2 ? x1 : num142) * (5.0 / 17.0);
                        double num143 = StandardMath.Pow(x3, 0.26);
                        double num144 = (!flag2 ? 17.0 / 516.0 : num141) * num143 * 0.000830858823529412;
                        double num145 = (!flag1 ? 0.0 : num144) * -1.13216848020515E-06;
                        numArray1[0] = num145;
                        bool flag4 = num128 > -5.0;
                        double x4 = num128 * 9.901;
                        bool flag5 = x4 < 5.0;
                        bool flag6 = x4 < 50.0;
                        double num146 = StandardMath.Exp(x4);
                        double num147 = num128 * 5.13337694385406E+22 - 2.54050570900767E+23;
                        double x5 = (!flag6 ? num147 : num146) + 1.0;
                        double num148 = 1.0 / x5;
                        double num149 = num146 * 9.901;
                        double num150 = num148 * (!flag6 ? 5.13337694385406E+22 : num149);
                        double num151 = StandardMath.Ln(x5);
                        double x6 = (!flag5 ? x4 : num151) * 0.100999899000101;
                        double num152 = StandardMath.Pow(x6, 0.314);
                        double num153 = (!flag5 ? 9.901 : num150) * num152 * 8.19773558226442E-05;
                        double num154 = -(!flag4 ? 0.0 : num153);
                        double num155 = num154 - 1.76595316172852E-05;
                        numArray1[1] = num155;
                        numArray1[2] = -3.87044362682971E-10;
                        numArray1[3] = 3.20028338439269E-07;
                        numArray1[4] = 2.96106240488233E-09;
                        numArray1[5] = 1.0925293887535E-05;
                        bool flag7 = num134 > -5.0;
                        double x7 = num134 * 9.901;
                        bool flag8 = x7 < 5.0;
                        bool flag9 = x7 < 50.0;
                        double num156 = StandardMath.Exp(x7);
                        double num157 = num134 * 5.13337694385406E+22 - 2.54050570900767E+23;
                        double x8 = (!flag9 ? num157 : num156) + 1.0;
                        double num158 = 1.0 / x8;
                        double num159 = num156 * 9.901;
                        double num160 = num158 * (!flag9 ? 5.13337694385406E+22 : num159);
                        double num161 = StandardMath.Ln(x8);
                        double x9 = (!flag8 ? x7 : num161) * 0.100999899000101;
                        double num162 = StandardMath.Pow(x9, 0.314);
                        double num163 = (!flag8 ? 9.901 : num160) * num162 * 8.19773558226442E-05;
                        double num164 = num137 * 3.4;
                        double num165 = num139 * (!flag3 ? 1.7627998797196E+22 : num164);
                        double num166 = (!flag2 ? 3.4 : num165) * num143 * 0.000830858823529412;
                        double num167 = (!flag7 ? 0.0 : num163) - (!flag1 ? 0.0 : num166);
                        double num168 = num167 * 1.13216848020515E-06 - 5.14622036456886E-10;
                        numArray1[6] = num168;
                        numArray1[7] = -5.4961732603151E-08;
                        double num169 = StandardMath.Pow(x6, 1.314) * 0.0006177;
                        double num170 = -(!flag4 ? 0.0 : num169);
                        double num171 = StandardMath.Pow(x9, 1.314) * 0.0006177;
                        double num172 = (!flag7 ? 0.0 : num171) * 1.13216848020515E-06;
                        double num173 = StandardMath.Pow(x3, 1.26) * 0.002242;
                        double num174 = (!flag1 ? 0.0 : num173) * 1.13216848020515E-06;
                        double num175 = num65 * 3.87044362682971E-10;
                        double num176 = num38 * 2.64246999361616E-06;
                        double num177 = num45 * 9.71905415165014E-06;
                        double num178 = num54 * 1.4518233904925E-05;
                        double num179 = num9 * 1.09254135194289E-05;
                        double num180 = num41 * 5.54817393051337E-08;
                        double num181 = num28 * 1.09102851672487E-05;
                        double num182 = num53 * 5.17030905563706E-10;
                        double num183 = num44 * 1.21749757326202E-06;
                        double num184 = num42 * 1.33839290068832E-09;
                        double num185 = num34 * 2.66455836715989E-12;
                        double num186 = num37 * 2.34453952613744E-07;
                        double num187 = num33 * 4.06428875388281E-07;
                        double num188 = num36 * 1.78216779122691E-06;
                        double num189 = num24 * 1.46216759235789E-08;
                        double num190 = num2 * 2.55931614836418E-07;
                        double num191 = num39 * 7.34622384856398E-07;
                        double num192 = num1 * 1.33839290068832E-09;
                        double num193 = num4 * 2.66455836715989E-12;
                        double num194 = num15 * 2.55931614836418E-07;
                        double num195 = num17 * 1.66444318066022E-08;
                        double num196 = num46 * 2.6319016662442E-05;
                        double num197 = num47 * 0.0563312742806745;
                        double num198 = num48 * 0.460448480655607;
                        double num199 = num49 * 0.000103879312816948;
                        double num200 = num16 * 2.66455836715989E-07;
                        double num201 = num170 + num172 - num174 + num175 - num176 - num177 - num178 + num179 + num180 + num181 - num182 + num183 + num184 + num185 + num186 - num187 - num188 - num189 - num190 + num191 - num192 - num193 + num194 + num195 + num196 + num197 - num198 + num199 + num200 - 7.84931691487158E-05 + num131 * 3.20028338439269E-07 - num128 * 1.76595316172852E-05 - num135 * 5.4961732603151E-08 + num133 * 1.0925293887535E-05 - num130 * 3.87044362682971E-10 + num132 * 2.96106240488233E-09 - num134 * 5.14622036456886E-10;
                        numArray1[8] = num201;
                        double[] numArray2 = Ab[1];
                        double num202 = (!flag1 ? 0.0 : num144) * -1.42210125028975 - 4.74493157794223E-05;
                        numArray2[0] = num202;
                        numArray2[1] = 5.37206197327628E-11;
                        numArray2[2] = 1.17739606451679E-15;
                        numArray2[3] = -1.99484107067129E-09;
                        numArray2[4] = -2.08180438639534E-07;
                        numArray2[5] = -3.3234944794712E-11;
                        double num203 = num167 * 1.42210125028975 + 4.37827610237211E-07;
                        numArray2[6] = num203;
                        numArray2[7] = 4.06560483686494E-09;
                        double num204 = ((!flag7 ? 0.0 : num171) - (!flag1 ? 0.0 : num173)) * 1.42210125028975;
                        double num205 = (num130 - num65) * 1.17739606451679E-15;
                        double num206 = num133 * 3.3234944794712E-11;
                        double num207 = num128 * 5.37206197327628E-11;
                        double num208 = num131 * 1.99484107067129E-09;
                        double num209 = num135 * 4.06560483686494E-09;
                        double num210 = num132 * 2.08180438639534E-07;
                        double num211 = num134 * 4.37827610237211E-07;
                        double num212 = num126 * 4.74493157794223E-05;
                        double num213 = num38 * 2.95818886107165E-10;
                        double num214 = num45 * 2.95655413494592E-11;
                        double num215 = num54 * 4.4164734359907E-11;
                        double num216 = num9 * 3.3235308717132E-11;
                        double num217 = num41 * 2.02445649883825E-09;
                        double num218 = num28 * 3.31892879917658E-11;
                        double num219 = num53 * 2.17773835828259E-07;
                        double num220 = num55 * 4.62482588510965E-06;
                        double num221 = num40 * 2.71158671126909E-06;
                        double num222 = num43 * 3.23493168424063E-05;
                        double num223 = num44 * 1.66715243486646E-06;
                        double num224 = -num42;
                        double num225 = num224 + num1;
                        double num226 = num225 * 4.88362160186774E-11;
                        double num227 = -num34 + num4;
                        double num228 = num227 * 1.12231414052906E-09;
                        double num229 = num37 * 7.13213232726858E-13;
                        double num230 = num33 * 1.23636410842162E-12;
                        double num231 = num36 * 5.42138717420845E-12;
                        double num232 = num24 * 4.44794068817454E-14;
                        double num233 = num32 * 9.60598318871436E-06;
                        double num234 = num2 - num15;
                        double num235 = num234 * 7.7854867593214E-13;
                        double num236 = num39 * 2.23473479587749E-12;
                        double num237 = num3 * 2.38343943780131E-06;
                        double num238 = num30 * 1.76757908226021E-08;
                        double num239 = num8 * 1.66344539622817E-06;
                        double num240 = num31 * 3.33429363455023E-06;
                        double num241 = num10 * 7.22254375091305E-06;
                        double num242 = num5 * 1.39743697756601E-08;
                        double num243 = num17 * 1.86330868044322E-12;
                        double num244 = num46 * 8.00629323871418E-11;
                        double num245 = num47 * 1.71360771637458E-07;
                        double num246 = num48 * 1.39724764600961E-06;
                        double num247 = num49 * 4.88697555749254E-06;
                        double num248 = num16 * 0.000112231414052906;
                        double num249 = num51 * 0.238343943780131;
                        double num250 = num204 + num205 - num206 + num207 - num208 + num209 - num210 + num211 - num212 - num213 + num214 + num215 - num216 - num217 - num218 + num219 - num220 + num221 - num222 - num223 + num226 + num228 - num229 + num230 + num231 + num232 - num233 + num235 - num236 + num237 - num238 - num239 + num240 + num241 + num242 + num243 - num244 - num245 + num246 - num247 - num248 - num249 + 0.00362382616722661;
                        numArray2[8] = num250;
                        double[] numArray3 = Ab[2];
                        numArray3[0] = 0.0;
                        double num251 = (!flag4 ? 0.0 : num153) * 2.19170231165209E-05;
                        numArray3[1] = num251;
                        bool flag10 = num130 > -5.0;
                        double x10 = num130 * 9.901;
                        bool flag11 = x10 < 5.0;
                        bool flag12 = x10 < 50.0;
                        double num252 = StandardMath.Exp(x10);
                        double num253 = num130 * 5.13337694385406E+22 - 2.54050570900767E+23;
                        double x11 = (!flag12 ? num253 : num252) + 1.0;
                        double num254 = 1.0 / x11;
                        double num255 = num252 * 9.901;
                        double num256 = num254 * (!flag12 ? 5.13337694385406E+22 : num255);
                        double num257 = StandardMath.Ln(x11);
                        double x12 = (!flag11 ? x10 : num257) * 0.100999899000101;
                        double num258 = StandardMath.Pow(x12, 0.314);
                        double num259 = (!flag11 ? 9.901 : num256) * num258 * 8.19773558226442E-05;
                        double num260 = -(!flag10 ? 0.0 : num259) - 1.47053613890112E-05;
                        numArray3[2] = num260;
                        numArray3[3] = 0.0;
                        numArray3[4] = 0.0;
                        numArray3[5] = 3.74178458921368E-10;
                        numArray3[6] = 0.0;
                        numArray3[7] = 0.0;
                        double num261 = StandardMath.Pow(x12, 1.314) * 0.0006177;
                        double num262 = -(!flag10 ? 0.0 : num261) + (!flag4 ? 0.0 : num169) * 2.19170231165209E-05 + num65 * 1.47053613890112E-05 - num45 * 1.89617346697217E-10 - num54 * 5.58862398570433E-11 + num9 * 2.13153244214847E-10 - num28 * 1.46853063509771E-05 - num44 * 1.96715943290165E-08 + num37 * 4.57416284790892E-12 - num33 * 1.67406943092448E-11 - num36 * 1.14310916870699E-11 + num24 * 1.96808595752415E-08 - num2 * 4.99318894452051E-12 + num39 * 1.4332376923448E-11 + num15 * 4.99318894452051E-12 - num46 * 3.54255472354346E-05 - num47 * 3.43270456676401E-05 - num48 * 3.49800725635005E-06 - 1.28555805570851E-07 - num130 * 1.47053613890112E-05 + num133 * 3.74178458921368E-10;
                        numArray3[8] = num262;
                        double[] numArray4 = Ab[3];
                        double num263 = (!flag1 ? 0.0 : num144) * 4.20209966325554E-05;
                        numArray4[0] = num263;
                        double num264 = (!flag4 ? 0.0 : num153) * 0.981877869392299;
                        double x13 = num128 * 3.4 + num131 * (17.0 / 516.0);
                        bool flag13 = x13 > -5.0;
                        bool flag14 = x13 < 5.0;
                        bool flag15 = x13 < 50.0;
                        double num265 = StandardMath.Exp(x13);
                        double num266 = num128 * 1.7627998797196E+22 + num131 * 1.70813941833295E+20 - 2.54050570900767E+23;
                        double x14 = (!flag15 ? num266 : num265) + 1.0;
                        double num267 = 1.0 / x14;
                        double num268 = num265 * 3.4;
                        double num269 = num267 * (!flag15 ? 1.7627998797196E+22 : num268);
                        double num270 = StandardMath.Ln(x14);
                        double x15 = (!flag14 ? x13 : num270) * (5.0 / 17.0);
                        double num271 = StandardMath.Pow(x15, 0.26);
                        double num272 = (!flag14 ? 3.4 : num269) * num271 * 0.000830858823529412;
                        double num273 = num264 - (!flag13 ? 0.0 : num272);
                        numArray4[1] = num273;
                        numArray4[2] = 0.0;
                        double num274 = num265 * (17.0 / 516.0);
                        double num275 = num267 * (!flag15 ? 1.70813941833295E+20 : num274);
                        double num276 = (!flag14 ? 17.0 / 516.0 : num275) * num271 * 0.000830858823529412;
                        double num277 = -(!flag13 ? 0.0 : num276) - 1.18780110619597E-05;
                        numArray4[3] = num277;
                        numArray4[4] = -1.09901304902783E-07;
                        numArray4[5] = 0.0;
                        double num278 = -(!flag7 ? 0.0 : num163) + (!flag1 ? 0.0 : num166);
                        double num279 = num278 * 4.20209966325554E-05 + 1.91004530147979E-08;
                        numArray4[6] = num279;
                        numArray4[7] = 2.0399320604809E-06;
                        double num280 = (!flag4 ? 0.0 : num169) * 0.981877869392299;
                        double num281 = StandardMath.Pow(x15, 1.26) * 0.002242;
                        double num282 = (!flag7 ? 0.0 : num171) * 4.20209966325554E-05;
                        double num283 = (!flag1 ? 0.0 : num173) * 4.20209966325554E-05;
                        double num284 = num38 * 1.81016072434795E-06;
                        double num285 = num41 * 2.05923236803668E-06;
                        double num286 = num53 * 1.91898593906119E-08;
                        double num287 = num44 * 1.14018690120178E-08;
                        double num288 = num42 * 4.96751186384108E-08;
                        double num289 = num34 * 9.88964099701705E-11;
                        double num290 = num1 * 4.96751186384108E-08;
                        double num291 = num4 * 9.88964099701705E-11;
                        double num292 = num17 * 1.14018690120178E-08;
                        double num293 = num48 * 2.05233642216321E-05;
                        double num294 = num49 * 0.00498803522806271;
                        double num295 = num16 * 9.88964099701705E-06;
                        double num296 = num280 - (!flag13 ? 0.0 : num281) - num282 + num283 - num284 - num285 + num286 - num287 - num288 - num289 + num290 + num291 + num292 - num293 - num294 - num295 + 0.00291174537585604 - num132 * 1.09901304902783E-07 + num134 * 1.91004530147979E-08 - num131 * 1.18780110619597E-05 + num135 * 2.0399320604809E-06;
                        numArray4[8] = num296;
                        double[] numArray5 = Ab[4];
                        double num297 = (!flag1 ? 0.0 : num144) * 0.00438703863168316;
                        numArray5[0] = num297;
                        double num298 = (num154 + (!flag13 ? 0.0 : num272)) * 0.00925250063579681;
                        numArray5[1] = num298;
                        numArray5[2] = 0.0;
                        double num299 = (!flag13 ? 0.0 : num276) * 0.00925250063579681;
                        numArray5[3] = num299;
                        double x16 = num135 * 3.4 + num132 * (17.0 / 516.0);
                        bool flag16 = x16 > -5.0;
                        bool flag17 = x16 < 5.0;
                        bool flag18 = x16 < 50.0;
                        double num300 = StandardMath.Exp(x16);
                        double num301 = num135 * 1.7627998797196E+22 + num132 * 1.70813941833295E+20 - 2.54050570900767E+23;
                        double x17 = (!flag18 ? num301 : num300) + 1.0;
                        double num302 = 1.0 / x17;
                        double num303 = num300 * (17.0 / 516.0);
                        double num304 = num302 * (!flag18 ? 1.70813941833295E+20 : num303);
                        double num305 = StandardMath.Ln(x17);
                        double x18 = (!flag17 ? x16 : num305) * (5.0 / 17.0);
                        double num306 = StandardMath.Pow(x18, 0.26);
                        double num307 = (!flag17 ? 17.0 / 516.0 : num304) * num306 * 0.000830858823529412;
                        double num308 = -(!flag16 ? 0.0 : num307) - 1.14738180652137E-05;
                        numArray5[4] = num308;
                        numArray5[5] = 0.0;
                        double num309 = num278 * 0.00438703863168316 + 1.99410846894689E-06;
                        numArray5[6] = num309;
                        bool flag19 = num135 > -5.0;
                        double x19 = num135 * 9.901;
                        bool flag20 = x19 < 5.0;
                        bool flag21 = x19 < 50.0;
                        double num310 = StandardMath.Exp(x19);
                        double num311 = num135 * 5.13337694385406E+22 - 2.54050570900767E+23;
                        double x20 = (!flag21 ? num311 : num310) + 1.0;
                        double num312 = 1.0 / x20;
                        double num313 = num310 * 9.901;
                        double num314 = num312 * (!flag21 ? 5.13337694385406E+22 : num313);
                        double num315 = StandardMath.Ln(x20);
                        double x21 = (!flag20 ? x19 : num315) * 0.100999899000101;
                        double num316 = StandardMath.Pow(x21, 0.314);
                        double num317 = (!flag20 ? 9.901 : num314) * num316 * 8.19773558226442E-05;
                        double num318 = num300 * 3.4;
                        double num319 = num302 * (!flag18 ? 1.7627998797196E+22 : num318);
                        double num320 = (!flag17 ? 3.4 : num319) * num306 * 0.000830858823529412;
                        double num321 = (!flag19 ? 0.0 : num317) - (!flag16 ? 0.0 : num320) + 2.05211076247629E-07;
                        numArray5[7] = num321;
                        double num322 = (!flag4 ? 0.0 : num169) * -0.00925250063579681;
                        double num323 = (!flag13 ? 0.0 : num281) * 0.00925250063579681;
                        double num324 = StandardMath.Pow(x21, 1.314) * 0.0006177;
                        double num325 = StandardMath.Pow(x18, 1.26) * 0.002242;
                        double num326 = (!flag7 ? 0.0 : num171) * 0.00438703863168316;
                        double num327 = (!flag1 ? 0.0 : num173) * 0.00438703863168316;
                        double num328 = num41 * 9.25250063579681E-08;
                        double num329 = num53 * 2.00344259369515E-06;
                        double num330 = num42 * 2.23199224098924E-09;
                        double num331 = num34 * 1.03248948345452E-08;
                        double num332 = num1 * 2.23199224098924E-09;
                        double num333 = num4 * 1.03248948345452E-08;
                        double num334 = num49 * 0.000223199224098924;
                        double num335 = num16 * 0.00103248948345452;
                        double num336 = num322 + num323 + (!flag19 ? 0.0 : num324) - (!flag16 ? 0.0 : num325) - num326 + num327 - num328 + num329 - num330 - num331 + num332 + num333 - num334 - num335 + 0.00257723005822534 + num134 * 1.99410846894689E-06 - num132 * 1.14738180652137E-05 + num135 * 2.05211076247629E-07;
                        numArray5[8] = num336;
                        double[] numArray6 = Ab[5];
                        numArray6[0] = 0.0;
                        double num337 = (!flag4 ? 0.0 : num153) * -0.618662720759419;
                        numArray6[1] = num337;
                        double num338 = (!flag10 ? 0.0 : num259) * 0.999974554963389;
                        double x22 = num130 * 3.4 + num133 * (17.0 / 516.0);
                        bool flag22 = x22 > -5.0;
                        bool flag23 = x22 < 5.0;
                        bool flag24 = x22 < 50.0;
                        double num339 = StandardMath.Exp(x22);
                        double num340 = num130 * 1.7627998797196E+22 + num133 * 1.70813941833295E+20 - 2.54050570900767E+23;
                        double x23 = (!flag24 ? num340 : num339) + 1.0;
                        double num341 = 1.0 / x23;
                        double num342 = num339 * 3.4;
                        double num343 = num341 * (!flag24 ? 1.7627998797196E+22 : num342);
                        double num344 = StandardMath.Ln(x23);
                        double x24 = (!flag23 ? x22 : num344) * (5.0 / 17.0);
                        double num345 = StandardMath.Pow(x24, 0.26);
                        double num346 = (!flag23 ? 3.4 : num343) * num345 * 0.000830858823529412;
                        double num347 = num338 - (!flag22 ? 0.0 : num346);
                        numArray6[2] = num347;
                        numArray6[3] = 0.0;
                        numArray6[4] = 0.0;
                        double num348 = num339 * (17.0 / 516.0);
                        double num349 = num341 * (!flag24 ? 1.70813941833295E+20 : num348);
                        double num350 = (!flag23 ? 17.0 / 516.0 : num349) * num345 * 0.000830858823529412;
                        double num351 = -(!flag22 ? 0.0 : num350) - 1.05621216081743E-05;
                        numArray6[5] = num351;
                        numArray6[6] = 0.0;
                        numArray6[7] = 0.0;
                        double num352 = (!flag10 ? 0.0 : num261) * 0.999974554963389;
                        double num353 = StandardMath.Pow(x24, 1.26) * 0.002242;
                        double num354 = (!flag4 ? 0.0 : num169) * 0.618662720759419;
                        double num355 = num45 * 5.35242322769898E-06;
                        double num356 = num54 * 1.57752870995102E-06;
                        double num357 = num9 * 6.01678272197703E-06;
                        double num358 = num28 * 1.05479854767237E-05;
                        double num359 = num44 * 2.7567084844036E-07;
                        double num360 = num37 * 1.29117171508153E-07;
                        double num361 = num33 * 4.72547910986697E-07;
                        double num362 = num36 * 3.22671114903474E-07;
                        double num363 = num24 * 1.41361314505552E-08;
                        double num364 = num2 * 1.40945229708425E-07;
                        double num365 = num39 * 4.04567137392213E-07;
                        double num366 = num15 * 1.40945229708425E-07;
                        double num367 = num46 * 2.54450366109994E-05;
                        double num368 = num47 * 0.0310333955724646;
                        double num369 = num48 * 0.0987399919662647;
                        double num370 = num352 - (!flag22 ? 0.0 : num353) - num354 + num355 + num356 - num357 - num358 - num359 - num360 + num361 + num362 + num363 + num364 - num365 - num366 - num367 - num368 + num369 + 0.00136363226613386 - num133 * 1.05621216081743E-05;
                        numArray6[8] = num370;
                        double[] numArray7 = Ab[6];
                        double num371 = (!flag1 ? 0.0 : num144) * -0.00846475000358422;
                        numArray7[0] = num371;
                        numArray7[1] = 0.0;
                        numArray7[2] = 0.0;
                        numArray7[3] = 0.0;
                        double num372 = (!flag16 ? 0.0 : num307) * -0.173796416991535;
                        numArray7[4] = num372;
                        numArray7[5] = 0.0;
                        double num373 = (!flag7 ? 0.0 : num163) * -0.991535249996416 - (!flag1 ? 0.0 : num166) * 0.00846475000358422 - 3.84761363799283E-06;
                        numArray7[6] = num373;
                        double num374 = ((!flag19 ? 0.0 : num317) - (!flag16 ? 0.0 : num320)) * 0.173796416991535;
                        numArray7[7] = num374;
                        double num375 = (!flag19 ? 0.0 : num324) * 0.173796416991535 - (!flag16 ? 0.0 : num325) * 0.173796416991535 - (!flag7 ? 0.0 : num171) * 0.991535249996416 - (!flag1 ? 0.0 : num173) * 0.00846475000358422 - num53 * 1.73796416991535E-06 + num34 * 8.95673144668803E-09 - num4 * 8.95673144668803E-09 + num16 * 0.000895673144668803 + 0.000477874523185371 - num134 * 3.84761363799283E-06;
                        numArray7[8] = num375;
                        double[] numArray8 = Ab[7];
                        numArray8[0] = 0.0;
                        double num376 = ((!flag4 ? 0.0 : num153) - (!flag13 ? 0.0 : num272)) * 0.171574723022753;
                        numArray8[1] = num376;
                        numArray8[2] = 0.0;
                        double num377 = (!flag13 ? 0.0 : num276) * -0.171574723022753;
                        numArray8[3] = num377;
                        double num378 = (!flag16 ? 0.0 : num307) * -0.0178851603782865;
                        numArray8[4] = num378;
                        numArray8[5] = 0.0;
                        numArray8[6] = 0.0;
                        double num379 = (!flag19 ? 0.0 : num317) * -0.982114839621713 - (!flag16 ? 0.0 : num320) * 0.0178851603782865 - 3.80535327197586E-06;
                        numArray8[7] = num379;
                        double num380 = (!flag4 ? 0.0 : num169) * 0.171574723022753 - (!flag13 ? 0.0 : num281) * 0.171574723022753 - (!flag19 ? 0.0 : num324) * 0.982114839621713 - (!flag16 ? 0.0 : num325) * 0.0178851603782865 + num41 * 1.71574723022753E-06 + num42 * 4.13891839201895E-08 - num1 * 4.13891839201895E-08 + num49 * 0.00413891839201895 + 0.000504364639842538 - num135 * 3.80535327197586E-06;
                        numArray8[8] = num380;
                        Simulation.RowReduce(Ab, 8, 8);
                        double[] numArray9 = Ab[7];
                        double num381 = -numArray9[8] / numArray9[7];
                        double[] numArray10 = Ab[6];
                        double num382 = -(numArray10[8] + numArray10[7] * num381) / numArray10[6];
                        double[] numArray11 = Ab[5];
                        double num383 = -(numArray11[8] + numArray11[6] * num382 + numArray11[7] * num381) / numArray11[5];
                        double[] numArray12 = Ab[4];
                        double num384 = -(numArray12[8] + numArray12[5] * num383 + numArray12[6] * num382 + numArray12[7] * num381) / numArray12[4];
                        double[] numArray13 = Ab[3];
                        double num385 = -(numArray13[8] + numArray13[4] * num384 + numArray13[5] * num383 + numArray13[6] * num382 + numArray13[7] * num381) / numArray13[3];
                        double[] numArray14 = Ab[2];
                        double num386 = -(numArray14[8] + numArray14[3] * num385 + numArray14[4] * num384 + numArray14[5] * num383 + numArray14[6] * num382 + numArray14[7] * num381) / numArray14[2];
                        double[] numArray15 = Ab[1];
                        double num387 = -(numArray15[8] + numArray15[2] * num386 + numArray15[3] * num385 + numArray15[4] * num384 + numArray15[5] * num383 + numArray15[6] * num382 + numArray15[7] * num381) / numArray15[1];
                        double[] numArray16 = Ab[0];
                        double num388 = -(numArray16[8] + numArray16[1] * num387 + numArray16[2] * num386 + numArray16[3] * num385 + numArray16[4] * num384 + numArray16[5] * num383 + numArray16[6] * num382 + numArray16[7] * num381) / numArray16[0];
                        double num389 = num167 * num382;
                        double num390 = (!flag1 ? 0.0 : num144) * num388;
                        double num391 = num389 + (!flag7 ? 0.0 : num171) - num390 - (!flag1 ? 0.0 : num173);
                        double num392 = num391 * 13021.2508626814;
                        double num393 = num55 * 0.304642188180286;
                        double num394 = num40 * 0.514948309581163;
                        double num395 = num43 * 0.689377989134635;
                        double num396 = num44 * 0.0355276226105254;
                        double num397 = num32 * 0.632756304978949;
                        double num398 = num3 * 0.156999684694025;
                        double num399 = num30 * 0.00335674996738319;
                        double num400 = num8 * 0.0348246981924164;
                        double num401 = num31 * 0.0710552452210509;
                        double num402 = num10 * 0.475756620284924;
                        double num403 = num5 * 0.00265382554927419;
                        double num404 = num51 * 15699.9684694025;
                        double num405 = num392 + num393 + num394 - num395 - num396 + num397 - num398 - num399 - num400 + num401 - num402 - num129 + num403 + num404 + 35.8094848277555;
                        double num406 = num391 * 16449.2378839697;
                        double num407 = num55 * 0.551360014997773;
                        double num408 = num40 * 0.0370510341222798;
                        double num409 = num43 * 0.349816602035796;
                        double num410 = num44 * 0.0180280664829827;
                        double num411 = num32 * 1.1452009581702;
                        double num412 = num3 * 0.28414760616253;
                        double num413 = num30 * 0.000241521440632816;
                        double num414 = num8 * 0.0180786425818185;
                        double num415 = num31 * 0.0360561329659654;
                        double num416 = num10 * 0.861053352007666;
                        double num417 = num129 + num405;
                        double num418 = num417 * 0.485275098567962;
                        double num419 = num5 * 0.000190945341796948;
                        double num420 = num51 * 28414.760616253;
                        double num421 = num406 + num407 - num408 - num409 - num410 + num411 - num412 + num413 - num414 + num415 - num127 - num416 + num418 - num419 + num420 + 45.2367242322569;
                        double num422 = -num130 + num65 - num386;
                        double num423 = num422 * 1.41688180101552E-05;
                        double num424 = num133 + num383;
                        double num425 = num424 * 0.399950278895393;
                        double num426 = num128 + num387;
                        double num427 = num426 * 0.513126819409998;
                        double num428 = -num131 - num385;
                        double num429 = num428 * 0.00929895130525455;
                        double num430 = num135 + num381;
                        double num431 = num430 * 0.00159700393039377;
                        double num432 = -num132 - num384;
                        double num433 = num432 * 8.60454007735236E-05;
                        double num434 = num134 + num382;
                        double num435 = num434 * 1.49675953301948E-05;
                        double num436 = -num126 - num388;
                        double num437 = num436 * 1.56094121506204E-06;
                        double num438 = num38 * 0.0767813242400449;
                        double num439 = num45 * 0.622747923639196;
                        double num440 = num54 * 0.495942813382675;
                        double num441 = num9 * 0.399954658348233;
                        double num442 = num41 * 0.00161211351568997;
                        double num443 = num28 * 0.399400843619221;
                        double num444 = num53 * 1.5030349881372E-05;
                        double num445 = -num55 + num127 + num421;
                        double num446 = num445 * 5.7231397619008E-07;
                        double num447 = num40 * 6.64351069451567E-08;
                        double num448 = num43 * 6.27245741393882E-07;
                        double num449 = num44 * 0.0493712667512408;
                        double num450 = num225 * 3.88892149295598E-05;
                        double num451 = num227 * 7.746005917013E-08;
                        double num452 = num37 * 0.0150226256486514;
                        double num453 = num33 * 0.0428734842446713;
                        double num454 = num36 * 0.0696101674069059;
                        double num455 = num24 * 0.000535266458161418;
                        double num456 = num32 * 1.18872333154177E-06;
                        double num457 = -num2 + num15;
                        double num458 = num457 * 0.009369077096293;
                        double num459 = num39 * 0.0470708936991078;
                        double num460 = num3 * 2.94946390532921E-07;
                        double num461 = num30 * 4.3306490947147E-10;
                        double num462 = num8 * 3.24162761390822E-08;
                        double num463 = num31 * 6.46511792819916E-08;
                        double num464 = num10 * 8.93776941008851E-07;
                        double num465 = num417 * 6.56893321696531E-08;
                        double num466 = num5 * 3.42378411385058E-10;
                        double num467 = num17 * 0.000483631420005322;
                        double num468 = num46 * 0.963479624690552;
                        double num469 = num47 * 2062.16044080915;
                        double num470 = num48 * 19025.1947873665;
                        double num471 = num49 * 3.0183849369464;
                        double num472 = num16 * 0.007746005917013;
                        double num473 = num51 * 0.0294946390532921;
                        double num474 = num423 + num425 + num427 + num429 + num431 + num433 + num435 + num437 + num438 + num439 + num440 + num441 - num442 + num443 + num444 + num446 - num447 - num448 - num449 + num450 + num451 - num452 + num453 + num454 - num125 - num455 - num456 + num458 - num459 + num460 + num461 - num462 + num463 + num464 + num465 - num466 - num467 + num468 + num469 + num470 - num471 - num472 - num473 + 2.28085439523658;
                        double num475 = num422 * 2.41663456932915E-13;
                        double num476 = num424 * 6.82155469354395E-09;
                        double num477 = -num128;
                        double num478 = num477 - num387;
                        double num479 = num478 * 3.79381219548793E-07;
                        double num480 = num131 + num385;
                        double num481 = num480 * 8.03804807183101E-06;
                        double num482 = -num135;
                        double num483 = num482 - num381;
                        double num484 = num483 * 1.63765075378779E-05;
                        double num485 = num132 + num384;
                        double num486 = num485 * 0.00083853772340322;
                        double num487 = -num134 - num382;
                        double num488 = num487 * 0.00176354204532062;
                        double num489 = num126 + num388;
                        double num490 = num489 * 0.191122855701099;
                        double num491 = num38 * 1.16714977486976E-06;
                        double num492 = num45 * 3.16907915069076E-07;
                        double num493 = num54 * 3.35432107986235E-07;
                        double num494 = num9 * 6.82162938952154E-09;
                        double num495 = num41 * 8.15489537922444E-06;
                        double num496 = num28 * 6.81218352171399E-09;
                        double num497 = num53 * 0.000877179300548892;
                        double num498 = num445 * 0.00808352186878878;
                        double num499 = num40 * 0.0448541124922025;
                        double num500 = num43 * 0.248226394962517;
                        double num501 = num44 * 0.0127925756718843;
                        double num502 = num42 - num1;
                        double num503 = num502 * 1.96721555922817E-07;
                        double num504 = num34 - num4;
                        double num505 = num504 * 4.52061070165374E-06;
                        double num506 = num37 * 7.64480906713649E-09;
                        double num507 = num33 * 1.85990274333057E-08;
                        double num508 = num36 * 4.39491115625583E-08;
                        double num509 = num125 + num474;
                        double num510 = num509 * 3.17656260230544E-07;
                        double num511 = num24 * 9.12950837302122E-12;
                        double num512 = num32 * 0.0167898591441456;
                        double num513 = num457 * 1.59799043063322E-10;
                        double num514 = num39 * 2.39537350770277E-08;
                        double num515 = num3 * 0.00416590490042712;
                        double num516 = num30 * 0.000292386707255462;
                        double num517 = num8 * 0.0127313097579959;
                        double num518 = num31 * 0.025585074722997;
                        double num519 = num10 * 0.0126239542437185;
                        double num520 = num417 * 0.0710475990118781;
                        double num521 = num5 * 0.000231159103752847;
                        double num522 = num17 * 7.35166146932328E-09;
                        double num523 = num46 * 1.64331150714382E-08;
                        double num524 = num47 * 3.51722225890023E-05;
                        double num525 = num48 * 0.0116714977486976;
                        double num526 = num49 * 0.0196853885829264;
                        double num527 = num16 * 0.452061070165374;
                        double num528 = num51 * 416.590490042712;
                        double num529 = num475 + num476 + num479 + num481 + num484 + num486 + num488 + num490 + num491 - num492 - num493 + num494 + num495 + num496 - num497 + num498 - num499 + num500 + num501 + num503 + num505 + num506 - num507 - num508 + num510 - num511 - num512 + num513 + num514 + num515 + num516 - num124 + num517 - num518 + num519 + num520 - num521 - num522 + num523 + num524 - num525 + num526 + num527 - num528 + 1.1562846344633;
                        double num530 = num130 - num65 + num386;
                        double num531 = num530 * 3.80804571167729E-06;
                        double num532 = -num133;
                        double num533 = num532 - num383;
                        double num534 = num533 * 0.107491601864047;
                        double num535 = num426 * 0.00286914402826343;
                        double num536 = num428 * 5.19950031958688E-05;
                        double num537 = num430 * 8.92963324866511E-06;
                        double num538 = num432 * 4.8112382471002E-07;
                        double num539 = num434 * 8.36948239204202E-08;
                        double num540 = num436 * 9.12337121862715E-09;
                        double num541 = num38 * 0.000429322088791782;
                        double num542 = num45 * 0.00627921866402648;
                        double num543 = num54 * 0.00277305981202297;
                        double num544 = num9 * 0.892507221103642;
                        double num545 = num41 * 9.01411834290466E-06;
                        double num546 = num28 * 0.107343934313672;
                        double num547 = num53 * 8.40438817841307E-08;
                        double num548 = num445 * 3.1833658300963E-09;
                        double num549 = num40 * 2.78680078508793E-10;
                        double num550 = num43 * 4.0207533505826E-09;
                        double num551 = num44 * 0.000129771052715727;
                        double num552 = num225 * 2.17448698386275E-07;
                        double num553 = num227 * 4.33126581035512E-10;
                        double num554 = num37 * 0.000151474373137127;
                        double num555 = num33 * 0.000733562730268281;
                        double num556 = num36 * 9.60842162404646E-05;
                        double num557 = num509 * 0.104137630727204;
                        double num558 = num24 * 0.000143859504663364;
                        double num559 = num32 * 6.61200213955898E-09;
                        double num560 = num457 * 0.0209072923367169;
                        double num561 = num39 * 0.000474619702496333;
                        double num562 = num3 * 1.64057195943945E-09;
                        double num563 = num30 * 1.81660824404997E-12;
                        double num564 = num124 + num529;
                        double num565 = num564 * 2.06873402508732E-09;
                        double num566 = num8 * 2.07593012219093E-10;
                        double num567 = num31 * 4.14425206203113E-10;
                        double num568 = num10 * 4.97143018011954E-09;
                        double num569 = num417 * 2.20322728712772E-10;
                        double num570 = num5 * 1.43619912651409E-12;
                        double num571 = num17 * 2.70422076588424E-06;
                        double num572 = num46 * 0.258947108394056;
                        double num573 = num47 * 4599.34536696933;
                        double num574 = num48 * 4.29322088791782;
                        double num575 = num49 * 0.0168772724600359;
                        double num576 = num16 * 4.33126581035512E-05;
                        double num577 = num51 * 0.000164057195943945;
                        double num578 = num531 + num534 + num535 + num536 + num537 + num538 + num539 + num540 + num541 - num542 + num543 - num122 + num544 - num545 - num546 + num547 + num548 - num549 - num550 - num551 + num552 + num553 + num554 - num555 + num556 + num557 + num558 - num559 + num560 + num561 + num562 + num563 + num565 - num566 + num567 + num568 + num569 - num570 - num571 - num572 + num573 - num574 - num575 - num576 - num577 + 0.0123929185951003;
                        double num579 = num422 * 1.52438701873323E-13;
                        double num580 = num424 * 4.30296311837656E-09;
                        double num581 = num478 * 2.39309581006244E-07;
                        double num582 = num480 * 5.07031401940688E-06;
                        double num583 = num483 * 1.03301243058267E-05;
                        double num584 = num485 * 0.000528940550837534;
                        double num585 = num487 * 0.00111242329932542;
                        double num586 = num489 * 0.120558235784427;
                        double num587 = num38 * 7.36225488251119E-07;
                        double num588 = num45 * 1.99902094423493E-07;
                        double num589 = num54 * 2.11586955500055E-07;
                        double num590 = num9 * 4.3030102357935E-09;
                        double num591 = num41 * 5.14402004050957E-06;
                        double num592 = num28 * 4.29705188427058E-09;
                        double num593 = num53 * 0.000553315240884525;
                        double num594 = num445 * 0.00509899840001398;
                        double num595 = num40 * 0.0565026990004109;
                        double num596 = num43 * 0.815212258940476;
                        double num597 = num44 * 0.0420125639057781;
                        double num598 = num502 * 1.24089835492584E-07;
                        double num599 = num504 * 2.85155246796807E-06;
                        double num600 = num37 * 4.82226309701098E-09;
                        double num601 = num33 * 1.17320658821267E-08;
                        double num602 = num36 * 2.77226255061891E-08;
                        double num603 = num509 * 2.00374142479146E-07;
                        double num604 = num24 * 5.75879540410332E-12;
                        double num605 = num32 * 0.0105908620403456;
                        double num606 = num457 * 1.00799512654221E-10;
                        double num607 = num39 * 1.51097577039677E-08;
                        double num608 = num3 * 0.00262780787467222;
                        double num609 = num30 * 0.000368319362347178;
                        double num610 = num564 * 0.419438147702866;
                        double num611 = num8 * 0.0420897164475067;
                        double num612 = num31 * 0.0840251761431124;
                        double num613 = num10 * 0.00796305416567341;
                        double num614 = num417 * 0.0446706807677828;
                        double num615 = num5 * 0.000291190986396675;
                        double num616 = num17 * 4.63734875441622E-09;
                        double num617 = num46 * 1.0365831727386E-08;
                        double num618 = num47 * 2.2186258615656E-05;
                        double num619 = num48 * 0.00736225488251119;
                        double num620 = num49 * 0.0124173307770163;
                        double num621 = num16 * 0.285155246796807;
                        double num622 = num51 * 262.780787467222;
                        double num623 = num579 + num580 + num581 + num582 + num583 + num584 + num585 + num586 + num587 - num588 - num589 + num590 + num591 + num592 - num593 + num594 - num595 - num596 - num597 + num598 + num599 + num600 - num601 - num602 + num603 - num604 - num605 + num606 + num607 + num608 + num609 + num610 - num611 + num612 - num121 + num613 + num614 - num615 - num616 + num617 + num618 - num619 + num620 + num621 - num622 + 0.729371874882124;
                        double num624 = num422 * 2.76432696687143E-10;
                        double num625 = num424 * 7.80300333144146E-06;
                        double num626 = num478 * 0.00042850863615062;
                        double num627 = num480 * 0.00907886790212869;
                        double num628 = num430 * 0.981502953628294;
                        double num629 = num432 * 0.0528828499294099;
                        double num630 = num434 * 0.0091993382699757;
                        double num631 = num436 * 0.00100279771282528;
                        double num632 = num38 * 0.00131827967772489;
                        double num633 = num45 * 0.000357937520613349;
                        double num634 = num54 * 0.000378868614364331;
                        double num635 = num122 + num578;
                        double num636 = num635 * 9.1308051339577E-07;
                        double num637 = num9 * 6.89000826087921E-06;
                        double num638 = num41 * 0.00921084533471725;
                        double num639 = num28 * 7.79228388575881E-06;
                        double num640 = num53 * 0.00923770505556236;
                        double num641 = num445 * 0.000349900480536083;
                        double num642 = num40 * 3.06311930800332E-05;
                        double num643 = num43 * 0.00044194214695185;
                        double num644 = num44 * 2.04953602087026E-05;
                        double num645 = num502 * 0.000222194368087935;
                        double num646 = num227 * 4.76072204471365E-05;
                        double num647 = num37 * 8.63457134687483E-06;
                        double num648 = num33 * 2.10066830757636E-05;
                        double num649 = num36 * 4.96400217862894E-05;
                        double num650 = num509 * 0.000358693413861167;
                        double num651 = num24 * 1.04430129859588E-08;
                        double num652 = num32 * 0.000726759929400671;
                        double num653 = num457 * 1.61400841927607E-07;
                        double num654 = num39 * 2.70549902202078E-05;
                        double num655 = num3 * 0.000180323892257309;
                        double num656 = num30 * 1.99672966119531E-07;
                        double num657 = num564 * 0.000227385436708511;
                        double num658 = num8 * 2.28176397587317E-05;
                        double num659 = num31 * 4.55516539839054E-05;
                        double num660 = num10 * 0.000546436037143362;
                        double num661 = num417 * 2.42168298474473E-05;
                        double num662 = num5 * 1.57860199340513E-07;
                        double num663 = num17 * 8.30360089269896E-06;
                        double num664 = num46 * 1.87974233747258E-05;
                        double num665 = num47 * 0.0355269826474482;
                        double num666 = num48 * 13.1827967772489;
                        double num667 = num49 * 22.2343832904003;
                        double num668 = num16 * 4.76072204471365;
                        double num669 = num51 * 18.0323892257309;
                        double num670 = num624 + num625 + num626 + num627 + num628 + num629 + num630 + num631 + num632 - num633 - num634 + num636 + num637 + num638 + num639 + num640 + num641 - num642 - num643 + num644 + num645 + num646 + num647 - num648 - num649 - num117 + num650 - num651 - num652 + num653 + num654 + num655 + num656 + num657 - num658 + num659 + num660 + num661 - num662 - num663 + num664 + num665 - num666 + num667 - num668 - num669 + 12.0908053014927;
                        double num671 = num422 * 3.29356857137861E-08;
                        double num672 = num424 * 0.000929691995295484;
                        double num673 = num478 * 0.0461470516053593;
                        double num674 = num480 * 0.97767302993244;
                        double num675 = num38 * 0.141960782060366;
                        double num676 = -num45 + num125 + num474;
                        double num677 = num676 * 0.0385398739797165;
                        double num678 = num54 * 0.0408014033924059;
                        double num679 = num635 * 0.000930136752567524;
                        double num680 = num9 * 4.34577151001408E-07;
                        double num681 = num41 * 0.991885203465241;
                        double num682 = num28 * 0.000928414822593916;
                        double num683 = num44 * 0.00465983769117106;
                        double num684 = num502 * 0.0239273701805674;
                        double num685 = num37 * 0.000929702175416523;
                        double num686 = num33 * 0.00226152941268937;
                        double num687 = num36 * 0.00534564821295336;
                        double num688 = num117 + num670;
                        double num689 = num688 * 0.0081147965347592;
                        double num690 = num24 * 1.24423701585414E-06;
                        double num691 = num234 * 1.01801210388066E-08;
                        double num692 = num39 * 0.0029130668163051;
                        double num693 = num72 * 0.0143284459563963;
                        double num694 = num17 * 0.000894184820234105;
                        double num695 = num46 * 0.00223962662853745;
                        double num696 = num48 * 1419.60782060366;
                        double num697 = num49 * 2394.34655073316;
                        double num698 = num671 + num672 + num673 + num674 + num675 + num677 - num678 + num679 - num680 + num681 + num682 + num683 + num684 + num685 - num686 - num687 + num689 - num89 - num690 + num691 + num692 + num693 - num694 + num695 - num696 + num697 - 0.0341810385007504;
                        double num699 = num483 * 0.00457451881810964;
                        double num700 = num485 * 0.0041245755889076;
                        double num701 = num487 * 0.0082068565142702;
                        double num702 = num436 * 0.115151652188686;
                        double num703 = num53 * 0.0041034282571351;
                        double num704 = num445 * 0.0374227732936813;
                        double num705 = num504 * 2.11473317724959E-05;
                        double num706 = num688 * 0.00458351768269368;
                        double num707 = -num89 - num698;
                        double num708 = num707 * 4.4994322920204E-06;
                        double num709 = num32 * 0.0777288788950046;
                        double num710 = num72 * 6.44698724306786E-08;
                        double num711 = num3 * 0.019286112808535;
                        double num712 = (num121 + num10 + num623) * 0.0584427660864696;
                        double num713 = num16 * 2.11473317724959;
                        double num714 = num51 * 1928.6112808535;
                        double num715 = num699 + num700 + num701 + num702 - num703 + num704 + num705 + num706 + num708 - num119 - num709 + num710 + num711 + num712 + num713 - num714 + 5.29784655196719;
                        double num716 = -num118 + num417 * (1.0 / 331.0);
                        double num717 = num422 * 3.54260607156591E-05;
                        double num718 = num424 * 0.999989050126688;
                        double num719 = num122 - num9 + num578;
                        double num720 = num719 * 0.000467436951846121;
                        double num721 = num28 * 0.998615306216714;
                        double num722 = (num44 - num24) * 0.00133831784925823;
                        double num723 = num234 * 1.09498733121128E-05;
                        double num724 = num46 * 2.40897212866482;
                        double num725 = num717 + num718 + num720 + num721 + num722 + num723 - num116 + num724 + 0.00328496199363384;
                        double num726 = num530 * 7.06492311870286E-14;
                        double num727 = num533 * 1.99425101633356E-09;
                        double num728 = num483 * 0.000212765957446809;
                        double num729 = -num122;
                        double num730 = num729 + num9 - num578;
                        double num731 = num730 * 9.3219682372811E-13;
                        double num732 = num28 * 1.99151139614642E-09;
                        double num733 = (-num44 + num24) * 2.66897095595441E-12;
                        double num734 = num688 * 0.000217021276595745;
                        double num735 = num707 * 2.12765957446809E-06;
                        double num736 = num457 * 2.18370350941725E-14;
                        double num737 = num72 * 3.04860552263751E-08;
                        double num738 = num76 * 1E-05;
                        double num739 = num116 + num725;
                        double num740 = num739 * 1.99427285336865E-09;
                        double num741 = num46 * 4.80414772071794E-09;
                        double num742 = num726 + num727 + num728 + num731 - num732 + num733 + num734 + num735 + num736 + num737 + num738 + num740 - num741 - num84 - 0.00275896290678766;
                        double num743 = num478 * 0.0291878444111689;
                        double num744 = num428 * 0.38162531971273;
                        double num745 = num38 * 0.0897896848253818;
                        double num746 = num676 * 0.0243763318828236;
                        double num747 = num54 * 0.0258067411144546;
                        double num748 = num122 + num37 + num116 + num578 + num725;
                        double num749 = num748 * 0.000588033287085048;
                        double num750 = -num41 + num89 + num698;
                        double num751 = num750 * 0.372636170993817;
                        double num752 = num44 * 0.00294654362921381;
                        double num753 = num224 + num72 + num1;
                        double num754 = num753 * 0.00898914871891294;
                        double num755 = num33 * 0.00143040923163103;
                        double num756 = num36 * 0.00338110329671432;
                        double num757 = num39 * 0.00184250429953315;
                        double num758 = num17 * 0.000565568687486658;
                        double num759 = -num48 - num49;
                        double num760 = num759 * 897.896848253818;
                        double num761 = num743 + num744 + num745 + num746 - num747 + num749 + num751 + num752 + num754 - num755 - num756 + num757 - num88 - num758 + num760;
                        double num762 = num478 * 2.91878444111689E-07 + num480 * 6.1837468028727E-06 + num38 * 8.97896848253818E-07 + num676 * 2.43763318828236E-07 - num54 * 2.58067411144546E-07 + num748 * 5.88033287085048E-09 + num750 * 3.72636170993817E-06 + num44 * 2.94654362921381E-08 + num225 * 8.98914871891294E-08 - num33 * 1.43040923163103E-08 - num36 * 3.38110329671432E-08 + num39 * 1.84250429953315E-08 - num72 * 5.33929723748336E-08 - num17 * 5.65568687486658E-09 + num759 * 0.00897896848253818 - num115 - 0.0028978743688882;
                        double num763 = num739 * 4.54545454545455E-06 - num114 - 0.00136363636363636;
                        double num764 = (num126 + num119 + num388 + num715) * 1E-05 - num113 - 0.00275;
                        double num765 = (num482 + num132 + num117 - num381 + num384 + num670) * 1E-05 - num112 - 0.00275;
                        double num766 = num478 * 1.98987204088418E-06;
                        double num767 = num480 * 7.82216775323804E-07;
                        double num768 = num38 * 1.84041765819733E-07;
                        double num769 = num45 - num125 - num474;
                        double num770 = num769 * 4.24831906398869E-06;
                        double num771 = num54 * 1.92033078684184E-06;
                        double num772 = num729 - num37 - num116 - num578 - num725;
                        double num773 = num772 * 1.02482729386517E-07;
                        double num774 = num41 - num89 - num698;
                        double num775 = num774 * 7.63791732328472E-07;
                        double num776 = num44 * 6.03952551609914E-09;
                        double num777 = num502 * 1.84250429953315E-08;
                        double num778 = num33 * 4.98016815836142E-07;
                        double num779 = num36 * 6.954125404234E-08;
                        double num780 = num39 * 3.21112552077754E-07;
                        double num781 = num68 * 2.93689915539423E-08;
                        double num782 = num72 * 1.09439485586108E-08;
                        double num783 = num17 * 1.15924518656924E-09;
                        double num784 = num48 + num49;
                        double num785 = num784 * 0.00184041765819733;
                        double num786 = num766 + num767 - num768 + num770 - num771 + num773 + num775 - num776 + num777 + num778 - num779 - num780 - num781 + num782 + num783 - num111 + num785 - 8.63448351685905E-06;
                        double num787 = (-num117 - num670) * 4.25531914893617E-06;
                        double num788 = num89 + num698;
                        double num789 = num788 * 2.12765957446809E-06;
                        double num790 = num787 + num789 - num110;
                        double num791 = num532 - num109 + num116 - num383 + num725;
                        double num792 = num130 + num109 - num108 + num386 + num791;
                        double num793 = num74 * -1.57058823529412E-05 + (num108 + num792) * 1.47058823529412E-05 - num107;
                        double num794 = num134 + num119 - num106 + num382 + num715;
                        double num795 = -num105 + num109 + num791;
                        double num796 = num482 + num117 - num92 - num381 + num670;
                        double num797 = (num40 + num121 + num623) * 0.993523601775551;
                        double num798 = num30 * 0.00647639822444909;
                        double num799 = (num124 + num8 + num529) * 0.00135619825652727;
                        double num800 = (num129 + num5 + num405) * 0.00512019996792183;
                        double num801 = num797 - num103 - num798 + num799 + num800;
                        double num802 = (num43 + num121 + num623) * 0.906559521584751;
                        double num803 = (num44 + num124 + num8 + num529) * 0.0467202392076247;
                        double num804 = num31 * 0.0934404784152495;
                        double num805 = num802 + num803 - num101 - num804;
                        double num806 = num126 + num119 - num100 + num388 + num715;
                        double num807 = num426 * 0.298480806132626;
                        double num808 = num428 * 0.117332516298571;
                        double num809 = num38 * 0.0276062648729599;
                        double num810 = num676 * 0.637247859598303;
                        double num811 = num54 * 0.288049618026275;
                        double num812 = num748 * 0.0153724094079776;
                        double num813 = num750 * 0.114568759849271;
                        double num814 = num44 * 0.000905928827414871;
                        double num815 = num753 * 0.00276375644929973;
                        double num816 = num33 * 0.0747025223754212;
                        double num817 = num36 * 0.010431188106351;
                        double num818 = num39 * 0.0481668828116631;
                        double num819 = num17 * 0.000173886777985386;
                        double num820 = num759 * 276.062648729599;
                        double num821 = num807 + num808 + num809 + num810 + num811 + num812 + num813 + num814 + num815 - num94 - num816 + num817 + num818 - num819 + num820;
                        double num822 = num132 - num90 + num92 + num384 + num796;
                        double num823 = num478 * 0.029154789094735;
                        double num824 = num428 * 0.381193127957676;
                        double num825 = num38 * 0.909179499415643;
                        double num826 = num676 * 0.0243487256179506;
                        double num827 = num54 * 0.025777514907077;
                        double num828 = num748 * 0.000587367337722551;
                        double num829 = num750 * 0.372214159475138;
                        double num830 = num44 * 0.00334847573566135;
                        double num831 = num753 * 0.00897896848253818;
                        double num832 = num33 * 0.00142878928912636;
                        double num833 = num36 * 0.00337727418765801;
                        double num834 = num39 * 0.00184041765819733;
                        double num835 = num17 * 0.00572675421652585;
                        double num836 = num759 * 908.205005843565;
                        double num837 = num823 + num824 - num825 + num826 - num827 + num828 + num829 - num830 + num831 - num832 - num833 - num97 + num834 + num835 + num836;
                        double num838 = num426 * 0.970812155588831 + num744 + num745 + num746 - num747 + num749 + num751 + num752 + num754 - num755 - num93 - num756 + num757 - num758 + num760;
                        double num839 = num122 - num87 + num116 + num578 + num725;
                        double num840 = num478 * 3.30553164339399E-05;
                        double num841 = num428 * 0.000432191755054054;
                        double num842 = num38 * 0.998969184241025;
                        double num843 = num676 * 2.76062648729599E-05;
                        double num844 = num54 * 2.92262073776383E-05;
                        double num845 = num748 * 6.65949362497223E-07;
                        double num846 = num750 * 0.000422011518679295;
                        double num847 = num44 * 0.00629501936487516;
                        double num848 = num753 * 1.01802363747598E-05;
                        double num849 = num33 * 1.61994250467841E-06;
                        double num850 = num36 * 3.8291090563016E-06;
                        double num851 = num39 * 2.08664133582463E-06;
                        double num852 = num17 * 0.0062923229040125;
                        double num853 = num784 * 10.3081575897465;
                        double num854 = num840 + num841 - num99 + num842 + num843 - num844 + num845 + num846 + num847 + num848 - num849 - num850 + num851 - num852 + num853;
                        double num855 = num426 * 0.0044202495434839;
                        double num856 = num480 * 0.0577938926040252;
                        double num857 = num99 + num854;
                        double num858 = num857 * 0.137843571914663;
                        double num859 = num769 * 0.00369158709903332;
                        double num860 = num54 * 0.00390821035027598;
                        double num861 = num772 * 8.90526149233686E-05;
                        double num862 = num774 * 0.0564325628682164;
                        double num863 = num44 * 0.000360578302767325;
                        double num864 = num42 - num72 - num1;
                        double num865 = num864 * 0.00136132973580876;
                        double num866 = num33 * 0.000216623251242657;
                        double num867 = num36 * 0.000512039193207925;
                        double num868 = num97 + num837;
                        double num869 = num868 * 0.15145686927275;
                        double num870 = num39 * 0.000279031526759888;
                        double num871 = num784 * 136.132973580876;
                        double num872 = num855 + num856 + num858 + num859 + num860 + num861 + num862 - num863 + num865 + num866 + num867 + num869 - num96 - num870 + num871;
                        double num873 = -num104 + num40 * 0.993523601775551 + (-num30 - num121 - num623) * 0.00647639822444909 + num799 + num800;
                        double num874 = num426 * 0.0291848733220791;
                        double num875 = num428 * 0.618413526692227;
                        double num876 = (-num99 - num854) * 0.0898823369547683;
                        double num877 = num769 * 0.0243738505672222;
                        double num878 = num54 * 0.0258041141946352;
                        double num879 = num772 * 0.000587973430000054;
                        double num880 = num41 * 0.372598239612296;
                        double num881 = num44 * 0.00238073257752331;
                        double num882 = num864 * 0.00898823369547683;
                        double num883 = num33 * 0.00143026362741298;
                        double num884 = num36 * 0.00338075912744388;
                        double num885 = num788 * 0.627401760387704;
                        double num886 = num39 * 0.0018423167473335;
                        double num887 = num784 * 898.823369547683;
                        double num888 = num874 + num875 + num876 + num877 + num878 + num879 - num120 + num880 - num881 + num882 + num883 + num884 + num885 - num886 + num887;
                        double num889 = num478 * 0.0465170408575906;
                        double num890 = num480 * 0.985673878744104;
                        double num891 = num857 * 0.14326121255896;
                        double num892 = num676 * 0.0388488718172553;
                        double num893 = num54 * 0.0411285333000812;
                        double num894 = num748 * 0.000937156168699168;
                        double num895 = (num120 - num41 + num888) * 0.593875030541911;
                        double num896 = num44 * 0.00379459020971209;
                        double num897 = num753 * 0.014326121255896;
                        double num898 = num33 * 0.00227966148282585;
                        double num899 = num36 * 0.00538850755750946;
                        double num900 = num39 * 0.00293642266192406;
                        double num901 = num759 * 1432.6121255896;
                        double num902 = num889 + num890 + num891 + num892 - num893 + num894 + num895 + num896 - num98 + num897 - num898 - num899 + num900 + num901;
                        double num903 = -num102;
                        double num904 = num43 * 0.906559521584751;
                        double num905 = (-num31 - num121 - num623) * 0.0934404784152495;
                        double num906 = num903 + num904 + num803 + num905;
                        double num907 = num54 * 0.0629804476505134;
                        double num908 = (-num120 + num41 - num888) * 0.629804476505134;
                        double num909 = num44 * 0.00402416295966929;
                        double num910 = (num98 + num42 - num72 - num1 + num902) * 0.0151928517514627;
                        double num911 = -num94;
                        double num912 = (num911 - num821) * 0.0654212258652327;
                        double num913 = num33 * 0.00244077821471936;
                        double num914 = (num93 + num838) * 0.069445388824902;
                        double num915 = num36 * 0.00646494117438864;
                        double num916 = num868 * 0.151928517514627;
                        double num917 = num88 + num761;
                        double num918 = num917 * 0.844047319525704;
                        double num919 = num784 * 1519.28517514627;
                        double num920 = num907 + num908 - num86 - num909 + num910 + num912 - num913 + num914 + num915 + num916 + num918 + num919;
                        double num921 = (num477 + num131 - num98 - num387 + num385 - num902) * 0.307454747465113;
                        double num922 = num45 * 0.629753240635144;
                        double num923 = num54 * 0.295984023098518;
                        double num924 = num772 * 0.0151916157821958;
                        double num925 = num33 * 0.0742627362663383;
                        double num926 = num36 * 0.0114707243665958;
                        double num927 = num509 * 0.370246759364856;
                        double num928 = (-num96 - num39 - num872) * 0.0476003961175468;
                        double num929 = num921 - num95 + num922 - num923 + num924 + num925 - num926 + num927 + num928;
                        double num930 = num730 * 0.00019404;
                        double num931 = (num105 - num28 + num795) * 0.41454;
                        double num932 = -num86;
                        double num933 = (num932 - num44 + num109 + num24 - num920 + num791) * 0.000555555555555556;
                        double num934 = (-num73 - num2 + num116 + num15 + num725) * 4.54545454545455E-06;
                        double num935 = num930 + num931 + num933 + num934 - num85 - num46;
                        double num936 = num719 * 0.00019404 + (num73 + num2 - num116 - num15 - num725) * 4.54545454545455E-06 - num83 - num47;
                        double num937 = num54 * -4.1454E-05 + (num86 + num44 + num920) * 2.64872127070013E-06 + (num94 + num821) * 4.30605306597126E-05 + num33 * 1.60653065971263E-06 + (-num93 - num838) * 4.57092519304128E-05 - num36 * 4.25525193041276E-06 - num80 - num48;
                        double num938 = num932 - num920;
                        double num939 = num938 * 0.000655555555555556 + num868 * 0.0001 + num917 * 0.000555555555555556 - num937 - num80 - num82;
                        double num940 = (num55 - num127 - num421) * 1.9404E-05;
                        double num941 = num932 + num119 - num920 + num715;
                        double num942 = num941 * 0.000454545454545455;
                        double num943 = (num100 + num806) * 5.97070303030303E-05;
                        double num944 = num32 * 4.03030303030303E-05;
                        double num945 = -num75 - num3;
                        double num946 = num945 * 1E-05;
                        double num947 = -num121 - num10 - num623;
                        double num948 = num947 * 3.03030303030303E-05;
                        double num949 = num940 + num942 + num943 + num944 + num946 + num948 - num79 + num51;
                        double num950 = num942 - num949 - num79 - num77;
                        double num951 = (num90 + num34 - num76 - num4 + num822) * 0.00515357658214801;
                        double num952 = (num742 + num84 + num16) * 515.357658214801;
                        double num953 = num132 - num53 + num951 - num123 + num92 + num384 + num796 + num952;
                        double num954 = num132 - num91 - num123 + num92 + num384 - num953 + num796;
                        double num955 = -num81;
                        double num956 = num938 * 15.8779436683132;
                        double num957 = num44 * 0.0638954327857415;
                        double num958 = (num911 - num33 - num821) * 0.03875453900016;
                        double num959 = (num93 + num36 + num838) * 0.102649971785902;
                        double num960 = num868 * 2.41231244270758;
                        double num961 = num917 * 13.4017357928199;
                        double num962 = (-num939 + num48 - num82) * 24123.1244270758;
                        double num963 = num955 + num54 + num956 - num957 + num958 + num959 + num960 + num961 + num962;
                        double num964 = -num78;
                        double num965 = num941 * 23.4253481006728;
                        double num966 = (num100 + num32 + num806) * 2.07704753159299;
                        double num967 = num945 * 0.515357658214801;
                        double num968 = num947 * 1.56168987337818;
                        double num969 = (-num949 - num79 + num51) * 51535.7658214801;
                        double num970 = num964 + num55 + num965 + num966 + num967 + num968 + num969;
                        bool flag25 = true && Math.Abs(num405) * 10000.0 < Math.Abs(num129) + 1E-06;
                        num129 += num405;
                        bool flag26 = flag25 && Math.Abs(num421) * 10000.0 < Math.Abs(num127) + 1E-06;
                        num127 += num421;
                        bool flag27 = flag26 && Math.Abs(num474) * 10000.0 < Math.Abs(num125) + 1E-06;
                        num125 += num474;
                        bool flag28 = flag27 && Math.Abs(num529) * 10000.0 < Math.Abs(num124) + 1E-06;
                        num124 += num529;
                        bool flag29 = flag28 && Math.Abs(num578) * 10000.0 < Math.Abs(num122) + 1E-06;
                        num122 += num578;
                        bool flag30 = flag29 && Math.Abs(num623) * 10000.0 < Math.Abs(num121) + 1E-06;
                        num121 += num623;
                        bool flag31 = flag30 && Math.Abs(num670) * 10000.0 < Math.Abs(num117) + 1E-06;
                        num117 += num670;
                        bool flag32 = flag31 && Math.Abs(num698) * 10000.0 < Math.Abs(num89) + 1E-06;
                        num89 += num698;
                        bool flag33 = flag32 && Math.Abs(num715) * 10000.0 < Math.Abs(num119) + 1E-06;
                        num119 += num715;
                        bool flag34 = flag33 && Math.Abs(num716) * 10000.0 < Math.Abs(num118) + 1E-06;
                        num118 += num716;
                        bool flag35 = flag34 && Math.Abs(num725) * 10000.0 < Math.Abs(num116) + 1E-06;
                        num116 += num725;
                        bool flag36 = flag35 && Math.Abs(num742) * 10000.0 < Math.Abs(num84) + 1E-06;
                        num84 += num742;
                        bool flag37 = flag36 && Math.Abs(num761) * 10000.0 < Math.Abs(num88) + 1E-06;
                        num88 += num761;
                        bool flag38 = flag37 && Math.Abs(num762) * 10000.0 < Math.Abs(num115) + 1E-06;
                        num115 += num762;
                        bool flag39 = flag38 && Math.Abs(num763) * 10000.0 < Math.Abs(num114) + 1E-06;
                        num114 += num763;
                        bool flag40 = flag39 && Math.Abs(num764) * 10000.0 < Math.Abs(num113) + 1E-06;
                        num113 += num764;
                        bool flag41 = flag40 && Math.Abs(num765) * 10000.0 < Math.Abs(num112) + 1E-06;
                        num112 += num765;
                        bool flag42 = flag41 && Math.Abs(num786) * 10000.0 < Math.Abs(num111) + 1E-06;
                        num111 += num786;
                        bool flag43 = flag42 && Math.Abs(num790) * 10000.0 < Math.Abs(num110) + 1E-06;
                        num110 += num790;
                        bool flag44 = flag43 && Math.Abs(num791) * 10000.0 < Math.Abs(num109) + 1E-06;
                        num109 += num791;
                        bool flag45 = flag44 && Math.Abs(num792) * 10000.0 < Math.Abs(num108) + 1E-06;
                        num108 += num792;
                        bool flag46 = flag45 && Math.Abs(num793) * 10000.0 < Math.Abs(num107) + 1E-06;
                        num107 += num793;
                        bool flag47 = flag46 && Math.Abs(num794) * 10000.0 < Math.Abs(num106) + 1E-06;
                        num106 += num794;
                        bool flag48 = flag47 && Math.Abs(num795) * 10000.0 < Math.Abs(num105) + 1E-06;
                        num105 += num795;
                        bool flag49 = flag48 && Math.Abs(num796) * 10000.0 < Math.Abs(num92) + 1E-06;
                        num92 += num796;
                        bool flag50 = flag49 && Math.Abs(num801) * 10000.0 < Math.Abs(num103) + 1E-06;
                        num103 += num801;
                        bool flag51 = flag50 && Math.Abs(num805) * 10000.0 < Math.Abs(num101) + 1E-06;
                        num101 += num805;
                        bool flag52 = flag51 && Math.Abs(num806) * 10000.0 < Math.Abs(num100) + 1E-06;
                        num100 += num806;
                        bool flag53 = flag52 && Math.Abs(num821) * 10000.0 < Math.Abs(num94) + 1E-06;
                        num94 += num821;
                        bool flag54 = flag53 && Math.Abs(num822) * 10000.0 < Math.Abs(num90) + 1E-06;
                        num90 += num822;
                        bool flag55 = flag54 && Math.Abs(num837) * 10000.0 < Math.Abs(num97) + 1E-06;
                        num97 += num837;
                        bool flag56 = flag55 && Math.Abs(num838) * 10000.0 < Math.Abs(num93) + 1E-06;
                        num93 += num838;
                        bool flag57 = flag56 && Math.Abs(num839) * 10000.0 < Math.Abs(num87) + 1E-06;
                        num87 += num839;
                        bool flag58 = flag57 && Math.Abs(num854) * 10000.0 < Math.Abs(num99) + 1E-06;
                        num99 += num854;
                        bool flag59 = flag58 && Math.Abs(num872) * 10000.0 < Math.Abs(num96) + 1E-06;
                        num96 += num872;
                        bool flag60 = flag59 && Math.Abs(num873) * 10000.0 < Math.Abs(num104) + 1E-06;
                        num104 += num873;
                        bool flag61 = flag60 && Math.Abs(num888) * 10000.0 < Math.Abs(num120) + 1E-06;
                        num120 += num888;
                        bool flag62 = flag61 && Math.Abs(num902) * 10000.0 < Math.Abs(num98) + 1E-06;
                        num98 += num902;
                        bool flag63 = flag62 && Math.Abs(num906) * 10000.0 < Math.Abs(num102) + 1E-06;
                        num102 += num906;
                        bool flag64 = flag63 && Math.Abs(num920) * 10000.0 < Math.Abs(num86) + 1E-06;
                        num86 += num920;
                        bool flag65 = flag64 && Math.Abs(num929) * 10000.0 < Math.Abs(num95) + 1E-06;
                        num95 += num929;
                        bool flag66 = flag65 && Math.Abs(num935) * 10000.0 < Math.Abs(num85) + 1E-06;
                        num85 += num935;
                        bool flag67 = flag66 && Math.Abs(num936) * 10000.0 < Math.Abs(num83) + 1E-06;
                        num83 += num936;
                        bool flag68 = flag67 && Math.Abs(num937) * 10000.0 < Math.Abs(num80) + 1E-06;
                        num80 += num937;
                        bool flag69 = flag68 && Math.Abs(num939) * 10000.0 < Math.Abs(num82) + 1E-06;
                        num82 += num939;
                        bool flag70 = flag69 && Math.Abs(num949) * 10000.0 < Math.Abs(num79) + 1E-06;
                        num79 += num949;
                        bool flag71 = flag70 && Math.Abs(num950) * 10000.0 < Math.Abs(num77) + 1E-06;
                        num77 += num950;
                        bool flag72 = flag71 && Math.Abs(num953) * 10000.0 < Math.Abs(num123) + 1E-06;
                        num123 += num953;
                        bool flag73 = flag72 && Math.Abs(num954) * 10000.0 < Math.Abs(num91) + 1E-06;
                        num91 += num954;
                        bool flag74 = flag73 && Math.Abs(num963) * 10000.0 < Math.Abs(num81) + 1E-06;
                        num81 += num963;
                        bool flag75 = flag74 && Math.Abs(num970) * 10000.0 < Math.Abs(num78) + 1E-06;
                        num78 += num970;
                        bool flag76 = flag75 && Math.Abs(num388) * 10000.0 < Math.Abs(num126) + 1E-06;
                        num126 += num388;
                        bool flag77 = flag76 && Math.Abs(num387) * 10000.0 < Math.Abs(num128) + 1E-06;
                        num128 += num387;
                        bool flag78 = flag77 && Math.Abs(num386) * 10000.0 < Math.Abs(num130) + 1E-06;
                        num130 += num386;
                        bool flag79 = flag78 && Math.Abs(num385) * 10000.0 < Math.Abs(num131) + 1E-06;
                        num131 += num385;
                        bool flag80 = flag79 && Math.Abs(num384) * 10000.0 < Math.Abs(num132) + 1E-06;
                        num132 += num384;
                        bool flag81 = flag80 && Math.Abs(num383) * 10000.0 < Math.Abs(num133) + 1E-06;
                        num133 += num383;
                        bool flag82 = flag81 && Math.Abs(num382) * 10000.0 < Math.Abs(num134) + 1E-06;
                        num134 += num382;
                        bool flag83 = flag82 && Math.Abs(num381) * 10000.0 < Math.Abs(num135) + 1E-06;
                        num135 += num381;
                        if (!flag83)
                            --iterations;
                        else
                            break;
                    }
                    while (iterations > 0);
                    double num971 = 0.0;
                    num1 = num72;
                    num2 = num73;
                    num3 = num75;
                    num4 = num76;
                    num5 = num129;
                    num6 = num127;
                    num7 = num125;
                    num8 = num124;
                    num9 = num122;
                    num10 = num121;
                    num11 = num117;
                    num12 = num89;
                    num13 = num119;
                    num14 = num118;
                    num15 = num116;
                    num16 = num84;
                    num17 = num88;
                    num18 = num115;
                    num19 = num114;
                    num20 = num113;
                    num21 = num112;
                    num22 = num111;
                    num23 = num110;
                    num24 = num109;
                    num25 = num108;
                    num26 = num107;
                    num27 = num106;
                    num28 = num105;
                    num29 = num92;
                    num30 = num103;
                    num31 = num101;
                    num32 = num100;
                    num33 = num94;
                    num34 = num90;
                    num35 = num97;
                    num36 = num93;
                    num37 = num87;
                    num38 = num99;
                    num39 = num96;
                    num40 = num104;
                    num41 = num120;
                    num42 = num98;
                    num43 = num102;
                    num44 = num86;
                    num45 = num95;
                    num46 = num85;
                    num47 = num83;
                    num48 = num80;
                    num49 = num82;
                    num50 = num79;
                    num51 = num77;
                    num52 = num123;
                    num53 = num91;
                    num54 = num81;
                    num55 = num78;
                    num56 = num126;
                    num57 = num128;
                    num58 = num130;
                    num59 = num131;
                    num60 = num132;
                    num61 = num133;
                    num62 = num134;
                    num63 = num135;
                    double num972 = num118 - num971;
                    d += num972;
                    num64 = num65;
                    --oversample;
                }
                while (oversample > 0);
                outs[0][sampleNumber] = d * 1.0;
                outs[1][sampleNumber] = d * 1.0;
                if ((sampleNumber & (int)byte.MaxValue) == 0 && (double.IsNaN(d) || double.IsInfinity(d)))
                {
                    throw new SimulationDiverged(sampleNumber);
                }
            }
            state[0] = num1;
            state[1] = num2;
            state[2] = num3;
            state[3] = num4;
            state[4] = num5;
            state[5] = num6;
            state[6] = num7;
            state[7] = num8;
            state[8] = num9;
            state[9] = num10;
            state[10] = num11;
            state[11] = num12;
            state[12] = num13;
            state[13] = num14;
            state[14] = num15;
            state[15] = num16;
            state[16] = num17;
            state[17] = num18;
            state[18] = num19;
            state[19] = num20;
            state[20] = num21;
            state[21] = num22;
            state[22] = num23;
            state[23] = num24;
            state[24] = num25;
            state[25] = num26;
            state[26] = num27;
            state[27] = num28;
            state[28] = num29;
            state[29] = num30;
            state[30] = num31;
            state[31] = num32;
            state[32] = num33;
            state[33] = num34;
            state[34] = num35;
            state[35] = num36;
            state[36] = num37;
            state[37] = num38;
            state[38] = num39;
            state[39] = num40;
            state[40] = num41;
            state[41] = num42;
            state[42] = num43;
            state[43] = num44;
            state[44] = num45;
            state[45] = num46;
            state[46] = num47;
            state[47] = num48;
            state[48] = num49;
            state[49] = num50;
            state[50] = num51;
            state[51] = num52;
            state[52] = num53;
            state[53] = num54;
            state[54] = num55;
            state[55] = num56;
            state[56] = num57;
            state[57] = num58;
            state[58] = num59;
            state[59] = num60;
            state[60] = num61;
            state[61] = num62;
            state[62] = num63;
            return state[63] = num64;
        }
    }
}
